{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fnil\fprq2\fcharset0 Droid Sans Fallback;}{\f6\fnil\fprq2\fcharset0 FreeSans;}{\f7\fswiss\fprq0\fcharset0 FreeSans;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\s0\snext0\nowidctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1033 Normal;}
{\s15\sbasedon0\snext16\sb240\sa120\keepn\dbch\af5\dbch\af6\afs28\loch\f4\fs28 Heading;}
{\s16\sbasedon0\snext16\sl288\slmult1\sb0\sa140 Text Body;}
{\s17\sbasedon16\snext17\sl288\slmult1\sb0\sa140\dbch\af7 List;}
{\s18\sbasedon0\snext18\sb120\sa120\noline\i\dbch\af7\afs24\ai\fs24 Caption;}
{\s19\sbasedon0\snext19\noline\dbch\af7 Index;}
}{\*\generator LibreOffice/5.0.3.2$Linux_X86_64 LibreOffice_project/00m0$Build-2}{\info{\author Thomas }{\creatim\yr2016\mo4\dy7\hr9\min13}{\author Thomas }{\revtim\yr2016\mo4\dy7\hr12\min54}{\printim\yr0\mo0\dy0\hr0\min0}}\deftab709
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Style;}}
\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\nowidctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1033\sl480\slmult1{\rtlch \ltrch\loch
Thomas Szymczak}
\par \pard\plain \s0\nowidctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1033\sl480\slmult1\qc{\rtlch \ltrch\loch
Review of the Price Program}
\par \pard\plain \s0\nowidctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1033\sl480\slmult1\ql{\rtlch \ltrch\loch
\tab The purpose of the price program is to sort, search, and modify a list of product prices. Both the searching and the sorting are done with multiple algorithms. Because the program only handles small sets of very simple data, it is mostly an academic exercise. By writing the price program, the student demonstrates understanding of classes, GUI's, and algorithms.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1033\sl480\slmult1\ql{\rtlch \ltrch\loch
\tab This particular implementation of the price program, written by Andy Gula in 2013, works adequately, but it has a few bugs and numerous pieces of }{\rtlch \ltrch\loch
ugly }{\rtlch \ltrch\loch
code. The program stores the list of prices using a Product object with five elements, but the Product class is of poor quality. Its most glaring flaw is the usage of a productRef field. Each price in a Product object has a number, called a productRef, associated with it. But the int array of productRefs }{\rtlch \ltrch\loch
significantly increases code complexity }{\rtlch \ltrch\loch
without a clear benefit. The list of prices could have simply been an array of prices, without }{\rtlch \ltrch\loch
the}{\rtlch \ltrch\loch
 refs. }{\rtlch \ltrch\loch
Additionally, the program ignores best practices for organizing classes. The subroutines for both sorting and searching take arrays from the Product class and then modify them from outside the class. Ideally, the sorting and searching code should be in the Product class. This would eliminate the unusual and confusing arrangement code.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1033\sl480\slmult1\ql{\rtlch \ltrch\loch
\tab }{\rtlch \ltrch\loch
Not only does the price program contain questionable code, but it also has annoying bugs. When the search function finds the search key, the label that displays the result becomes too long, causing the left edges of the Products and Product Information panels to become corrupted. This could have been avoided by using a text box or text area to display the output text instead. Furthermore, the binary search function does not always work. Because the program does not ensure that the list of products is sorted before running the search, the algorithm can fail to find a price that exists in the list. This could have been avoided by giving the Product class two Boolean fields, to track whether the data are sorted and the direction of the sort. The binary sort could check these before running, and return an error or automatically sort the list if it is unsorted. As a side benefit, these fields could also be used to find the maximum and minimum prices in O(1) time when the list is sorted. If the list is unsorted, the highest number could be found in O(n) time. In fact, this program actually }{\i\ai\rtlch \ltrch\loch
sorts}{\i0\ai0\rtlch \ltrch\loch
 the list with an O(n}{\super\i0\ai0\rtlch \ltrch\loch
2}{\i0\ai0\rtlch \ltrch\loch
) sort to get the largest number, which complicates the code, wastes CPU time, and }{\i0\ai0\rtlch \ltrch\loch
makes the author look amateurish}{\i0\ai0\rtlch \ltrch\loch
.}
\par }